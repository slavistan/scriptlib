#!/usr/bin/env -S zsh -e

usage() {
	name="$(basename "$0")"
	cat <<EOF
Spawn a new terminal with an interactive zsh session in the working directory of
the process which owns the currently selected window.

Usage:
	$name

Highly hacky. Can't be run manually from a terminal (will create children which
will mess up the process tree). Bind to a hotkey.
EOF
}

# Find the correct child whose cwd we want. Highly selective.
# TODO: Use a single pass with `ps` only.
walk() {
	pid="$1"
	while list="$(pgrep -lP "$pid")"; do
		if [ "$(echo "$list" | wc -l)" -eq 1 ]; then
			# If its only one child, pass it on
			pid="$(echo "$list" | cut -d' ' -f1)"
		else
			# If there are multiple children select your favorite.
			if line="$(echo "$list" | grep ' lf$')"; then
				pid="$(echo "$line" | cut -d' ' -f1)"
			else
				pid="$(echo "$list" | head -1 | cut -d' ' -f1)"
			fi
		fi
	done
	echo "$pid"
}

termcwd() {
	props="$(xprop -notype -id "$(xdotool getwindowfocus)")"
	if echo "$props" | grep -qF "_NET_WM_PID"; then
		pid="$(echo "$props" | grep "^_NET_WM_PID" | cut -d= -f2 | tr -d ' ')"
		targetpid="$(walk $pid)"
		target_dir="$(realpath /proc/$targetpid/cwd)"
	else
		target_dir="$HOME"
	fi
	zshxi <<< "cd ${(q)target_dir}" &
}

case "$1" in
	-h|--help) usage ;;
	*) termcwd ;;
esac

# TODO: Refactor as a python script.
#       Think of a proper configuration format for how to traverse the tree.
#       Take not of suckers who don't set the cwd, e.g.
#       - evince
